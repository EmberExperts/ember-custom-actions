{"version":3,"file":"route-recognizer.js","sources":["route-recognizer/util.ts","route-recognizer/dsl.ts","route-recognizer/normalizer.ts","route-recognizer.ts"],"sourcesContent":["const createObject = Object.create;\nexport function createMap<T>() {\n  const map: { [key: string]: T | undefined } = createObject(null);\n  map[\"__\"] = undefined;\n  delete map[\"__\"];\n  return map;\n}\n","import { createMap } from \"./util\";\n\nexport interface Delegate {\n  contextEntered?(context: string, route: MatchDSL): void;\n  willAddRoute?(context: string | undefined, route: string): string;\n}\n\nexport type Opaque = {} | void | null | undefined;\n\nexport interface Route {\n  path: string;\n  handler: Opaque;\n  queryParams?: string[];\n}\n\nexport interface RouteRecognizer {\n  delegate: Delegate | undefined;\n  add(routes: Route[]): void;\n}\n\nexport interface MatchCallback {\n  (match: MatchDSL): void;\n}\n\nexport interface MatchDSL {\n  (path: string): ToDSL;\n  (path: string, callback: MatchCallback): void;\n}\n\nexport interface ToDSL {\n  to(name: string, callback?: MatchCallback): void;\n}\n\nclass Target implements ToDSL {\n  path: string;\n  matcher: Matcher;\n  delegate: Delegate | undefined;\n\n  constructor(path: string, matcher: Matcher, delegate: Delegate | undefined) {\n    this.path = path;\n    this.matcher = matcher;\n    this.delegate = delegate;\n  }\n\n  to(target: string, callback: MatchCallback) {\n    let delegate = this.delegate;\n\n    if (delegate && delegate.willAddRoute) {\n      target = delegate.willAddRoute(this.matcher.target, target);\n    }\n\n    this.matcher.add(this.path, target);\n\n    if (callback) {\n      if (callback.length === 0) { throw new Error(\"You must have an argument in the function passed to `to`\"); }\n      this.matcher.addChild(this.path, target, callback, this.delegate);\n    }\n  }\n}\n\nexport class Matcher {\n  routes: {\n    [path: string]: string | undefined;\n  };\n  children: {\n    [path: string]: Matcher | undefined;\n  };\n  target: string | undefined;\n\n  constructor(target?: string) {\n    this.routes = createMap<string>();\n    this.children = createMap<Matcher>();\n    this.target = target;\n  }\n\n  add(path: string, target: string) {\n    this.routes[path] = target;\n  }\n\n  addChild(path: string, target: string, callback: MatchCallback, delegate: Delegate | undefined) {\n    let matcher = new Matcher(target);\n    this.children[path] = matcher;\n\n    let match = generateMatch(path, matcher, delegate);\n\n    if (delegate && delegate.contextEntered) {\n      delegate.contextEntered(target, match);\n    }\n\n    callback(match);\n  }\n}\n\nfunction generateMatch(startingPath: string, matcher: Matcher, delegate: Delegate | undefined): MatchDSL {\n  function match(path: string): ToDSL;\n  function match(path: string, callback: MatchCallback): void;\n  function match(path: string, callback?: MatchCallback): ToDSL | void {\n    let fullPath = startingPath + path;\n    if (callback) {\n      callback(generateMatch(fullPath, matcher, delegate));\n    } else {\n      return new Target(fullPath, matcher, delegate);\n    }\n  };\n  return match;\n}\n\nfunction addRoute(routeArray: Route[], path: string, handler: any) {\n  let len = 0;\n  for (let i = 0; i < routeArray.length; i++) {\n    len += routeArray[i].path.length;\n  }\n\n  path = path.substr(len);\n  let route = { path: path, handler: handler };\n  routeArray.push(route);\n}\n\nfunction eachRoute<T>(baseRoute: Route[], matcher: Matcher, callback: (this: T, routes: Route[]) => void, binding: T) {\n  let routes = matcher.routes;\n  let paths = Object.keys(routes);\n  for (let i = 0; i < paths.length; i++) {\n    let path = paths[i];\n    let routeArray = baseRoute.slice();\n    addRoute(routeArray, path, routes[path]);\n    let nested = matcher.children[path];\n    if (nested) {\n      eachRoute(routeArray, nested, callback, binding);\n    } else {\n      callback.call(binding, routeArray);\n    }\n  }\n}\n\nexport default function <T extends RouteRecognizer>(this: T, callback: MatchCallback, addRouteCallback?: (routeRecognizer: T, routes: Route[]) => void) {\n  let matcher = new Matcher();\n\n  callback(generateMatch(\"\", matcher, this.delegate));\n\n  eachRoute([], matcher, function(routes: Route[]) {\n    if (addRouteCallback) { addRouteCallback(this, routes); }\n    else { this.add(routes); }\n  }, this);\n}\n","// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\nexport function normalizePath(path: string): string {\n  return path.split(\"/\")\n             .map(normalizeSegment)\n             .join(\"/\");\n}\n\n// We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\nconst SEGMENT_RESERVED_CHARS = /%|\\//g;\nexport function normalizeSegment(segment: string) {\n  if (segment.length < 3 || segment.indexOf(\"%\") === -1) return segment;\n  return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n}\n\n// We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\nconst PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;\n\nexport function encodePathSegment(str: string) {\n  return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\n","import { createMap } from \"./route-recognizer/util\";\nimport map, { Delegate, Route, Opaque, MatchCallback } from \"./route-recognizer/dsl\";\nimport { normalizePath, normalizeSegment, encodePathSegment } from \"./route-recognizer/normalizer\";\nexport { Delegate, MatchCallback } from './route-recognizer/dsl';\n\nconst enum CHARS {\n  ANY = -1,\n  STAR = 42,\n  SLASH = 47,\n  COLON = 58\n}\n\nconst escapeRegex = /(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)/g;\n\nconst isArray = Array.isArray;\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction getParam(params: Params | null | undefined, key: string): string {\n  if (typeof params !== \"object\" || params === null) {\n    throw new Error(\"You must pass an object as the second argument to `generate`.\");\n  }\n\n  if (!hasOwnProperty.call(params, key)) {\n    throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n  }\n\n  let value = params[key];\n  let str = typeof value === \"string\" ? value : \"\" + value;\n  if (str.length === 0) {\n    throw new Error(\"You must provide a param `\" + key + \"`.\");\n  }\n  return str;\n}\n\nconst enum SegmentType {\n  Static  = 0,\n  Dynamic = 1,\n  Star    = 2,\n  Epsilon = 4\n}\n\nconst enum SegmentFlags {\n  Static  = 2 << SegmentType.Static,\n  Dynamic = 2 << SegmentType.Dynamic,\n  Star    = 2 << SegmentType.Star,\n  Epsilon = 2 << SegmentType.Epsilon,\n  Named = Dynamic | Star,\n  Decoded = Dynamic,\n  Counted = Static | Dynamic | Star\n}\n\nconst eachChar: ((segment: Segment, currentState: State) => State)[] = [];\neachChar[SegmentType.Static] = function (segment: Segment, currentState: State) {\n  let state = currentState;\n  let value = segment.value;\n  for (let i = 0; i < value.length; i++) {\n    let ch = value.charCodeAt(i);\n    state = state.put(ch, false, false);\n  }\n  return state;\n};\neachChar[SegmentType.Dynamic] = function (_: Segment, currentState: State) {\n  return currentState.put(CHARS.SLASH, true, true);\n};\neachChar[SegmentType.Star] = function (_: Segment, currentState: State) {\n  return currentState.put(CHARS.ANY, false, true);\n};\neachChar[SegmentType.Epsilon] = function (_: Segment, currentState: State) {\n  return currentState;\n};\n\nconst regex: ((segment: Segment) => string)[] = [];\nregex[SegmentType.Static] = function (segment: Segment) {\n  return segment.value.replace(escapeRegex, \"\\\\$1\");\n};\nregex[SegmentType.Dynamic] = function () {\n  return \"([^/]+)\";\n};\nregex[SegmentType.Star] = function () {\n  return \"(.+)\";\n};\nregex[SegmentType.Epsilon] = function () {\n  return \"\";\n};\n\nconst generate: ((segment: Segment, params?: Params | null) => string)[] = [];\ngenerate[SegmentType.Static] = function (segment: Segment) {\n  return segment.value;\n};\ngenerate[SegmentType.Dynamic] = function (segment: Segment, params?: Params) {\n  let value = getParam(params, segment.value);\n  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n    return encodePathSegment(value);\n  } else {\n    return value;\n  }\n};\ngenerate[SegmentType.Star] = function (segment: Segment, params?: Params) {\n  return getParam(params, segment.value);\n};\ngenerate[SegmentType.Epsilon] = function () {\n  return \"\";\n};\n\n// A Segment represents a segment in the original route description.\n// Each Segment type provides an `eachChar` and `regex` method.\n//\n// The `eachChar` method invokes the callback with one or more character\n// specifications. A character specification consumes one or more input\n// characters.\n//\n// The `regex` method returns a regex fragment for the segment. If the\n// segment is a dynamic of star segment, the regex fragment also includes\n// a capture.\n//\n// A character specification contains:\n//\n// * `validChars`: a String with a list of all valid characters, or\n// * `invalidChars`: a String with a list of all invalid characters\n// * `repeat`: true if the character specification can repeat\ninterface Segment {\n  type: SegmentType;\n  value: string;\n}\n\nexport interface Params {\n  [key: string]: Opaque;\n  [key: number]: Opaque;\n  queryParams?: QueryParams | null;\n}\n\ninterface PopulatedParsedHandlers {\n  names: string[];\n  shouldDecodes: any[];\n}\n\nconst EmptyObject = Object.freeze({});\ntype EmptyObject = Readonly<{}>\n\nconst EmptyArray = Object.freeze([]) as ReadonlyArray<any>;\ntype EmptyArray = ReadonlyArray<any>;\n\ninterface EmptyParsedHandlers {\n  names: EmptyArray;\n  shouldDecodes: EmptyArray;\n}\n\ntype ParsedHandler = PopulatedParsedHandlers | EmptyParsedHandlers;\n\n// The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\nfunction parse(segments: Segment[], route: string, types: [number, number, number]) {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route.length > 0 && route.charCodeAt(0) === CHARS.SLASH) { route = route.substr(1); }\n\n  let parts = route.split(\"/\");\n  let names: void | string[] = undefined;\n  let shouldDecodes: void | any[] = undefined;\n\n  for (let i = 0; i < parts.length; i++) {\n    let part = parts[i];\n    let flags: SegmentFlags = 0;\n    let type: SegmentType = 0;\n\n    if (part === \"\") {\n      type = SegmentType.Epsilon;\n    } else if (part.charCodeAt(0) === CHARS.COLON) {\n      type = SegmentType.Dynamic;\n    } else if (part.charCodeAt(0) === CHARS.STAR) {\n      type = SegmentType.Star;\n    }  else {\n      type = SegmentType.Static;\n    }\n\n    flags = 2 << type;\n\n    if (flags & SegmentFlags.Named) {\n      part = part.slice(1);\n      names = names || [];\n      names.push(part);\n\n      shouldDecodes = shouldDecodes || [];\n      shouldDecodes.push((flags & SegmentFlags.Decoded) !== 0);\n    }\n\n    if (flags & SegmentFlags.Counted) {\n      types[type]++;\n    }\n\n    segments.push({\n      type,\n      value: normalizeSegment(part)\n    });\n  }\n\n  return {\n    names: names || EmptyArray,\n    shouldDecodes: shouldDecodes || EmptyArray,\n  } as ParsedHandler;\n}\n\nfunction isEqualCharSpec(spec: CharSpec, char: number, negate: boolean) {\n  return spec.char === char && spec.negate === negate;\n}\n\ninterface EmptyHandler {\n  handler: Opaque;\n  names: EmptyArray;\n  shouldDecodes: EmptyArray;\n}\n\ninterface PopulatedHandler {\n  handler: Opaque;\n  names: string [];\n  shouldDecodes: boolean[];\n}\n\ntype Handler = EmptyHandler | PopulatedHandler;\n\n// A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\nclass State implements CharSpec {\n  states: State[];\n  id: number;\n  negate: boolean;\n  char: number;\n  nextStates: number[] | number | null;\n  pattern: string;\n  _regex: RegExp | undefined;\n  handlers: Handler[] | undefined;\n  types: [number, number, number] | undefined;\n\n  constructor(states: State[], id: number, char: number, negate: boolean, repeat: boolean) {\n    this.states = states;\n    this.id = id;\n    this.char = char;\n    this.negate = negate;\n    this.nextStates = repeat ? id : null;\n    this.pattern = \"\";\n    this._regex = undefined;\n    this.handlers = undefined;\n    this.types = undefined;\n  }\n\n  regex(): RegExp {\n    if (!this._regex) {\n      this._regex = new RegExp(this.pattern);\n    }\n    return this._regex;\n  }\n\n  get(char: number, negate: boolean): State | void {\n    let nextStates = this.nextStates;\n    if (nextStates === null) return;\n    if (isArray(nextStates)) {\n      for (let i = 0; i < nextStates.length; i++) {\n        let child = this.states[nextStates[i]];\n        if (isEqualCharSpec(child, char, negate)) {\n          return child;\n        }\n      }\n    } else {\n      let child = this.states[nextStates];\n      if (isEqualCharSpec(child, char, negate)) {\n        return child;\n      }\n    }\n  }\n\n  put(char: number, negate: boolean, repeat: boolean) {\n    let state: State | void;\n\n    // If the character specification already exists in a child of the current\n    // state, just return that state.\n    if (state = this.get(char, negate)) { return state; }\n\n    // Make a new state for the character spec\n    let states = this.states;\n    state = new State(states, states.length, char, negate, repeat);\n    states[states.length] = state;\n\n    // Insert the new state as a child of the current state\n    if (this.nextStates == null) {\n      this.nextStates = state.id;\n    } else if (isArray(this.nextStates)) {\n      this.nextStates.push(state.id);\n    } else {\n      this.nextStates = [this.nextStates, state.id];\n    }\n\n    // Return the new state\n    return state;\n  }\n\n  // Find a list of child states matching the next character\n  match(ch: number): State[] {\n    let nextStates = this.nextStates;\n    if (!nextStates) return [];\n\n    let returned: State[] = [];\n    if (isArray(nextStates)) {\n      for (let i = 0; i < nextStates.length; i++) {\n        let child = this.states[nextStates[i]];\n\n        if (isMatch(child, ch)) {\n          returned.push(child);\n        }\n      }\n    } else {\n      let child = this.states[nextStates];\n      if (isMatch(child, ch)) {\n        returned.push(child);\n      }\n    }\n    return returned;\n  }\n}\n\nfunction isMatch(spec: CharSpec, char: number) {\n  return spec.negate ? spec.char !== char && spec.char !== CHARS.ANY : spec.char === char || spec.char === CHARS.ANY;\n}\n\n// This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\nfunction sortSolutions(states: State[]) {\n  return states.sort(function(a, b) {\n    let [ astatics, adynamics, astars ] = a.types || [0, 0, 0];\n    let [ bstatics, bdynamics, bstars ] = b.types || [0, 0, 0];\n    if (astars !== bstars) { return astars - bstars; }\n\n    if (astars) {\n      if (astatics !== bstatics) { return bstatics - astatics; }\n      if (adynamics !== bdynamics) { return bdynamics - adynamics; }\n    }\n\n    if (adynamics !== bdynamics) { return adynamics - bdynamics; }\n    if (astatics !== bstatics) { return bstatics - astatics; }\n\n    return 0;\n  });\n}\n\nfunction recognizeChar(states: State[], ch: number) {\n  let nextStates: State[] = [];\n\n  for (let i = 0, l = states.length; i < l; i++) {\n    let state = states[i];\n\n    nextStates = nextStates.concat(state.match(ch));\n  }\n\n  return nextStates;\n}\n\n\nexport interface QueryParams {\n  [param: string]: any[] | any | null | undefined;\n}\n\nexport interface Result {\n  handler: Opaque;\n  params: Params;\n  isDynamic: boolean;\n}\n\nexport interface Results extends ArrayLike<Result | undefined> {\n  queryParams: QueryParams;\n  slice(start?: number, end?: number): Result[];\n  splice(start: number, deleteCount: number, ...items: Result[]): Result[];\n  push(...results: Result[]): number;\n}\n\nclass RecognizeResults implements Results {\n  queryParams: QueryParams;\n  length = 0;\n  [index: number]: Result | undefined;\n  splice: (start: number, deleteCount: number, ...items: Result[]) => Result[];\n  slice: (start?: number, end?: number) => Result[];\n  push: (...results: Result[]) => number;\n\n  constructor(queryParams?: QueryParams) {\n    this.queryParams = queryParams || {};\n  }\n};\n\nRecognizeResults.prototype.splice = Array.prototype.splice;\nRecognizeResults.prototype.slice =  Array.prototype.slice;\nRecognizeResults.prototype.push = Array.prototype.push;\n\nfunction findHandler(state: State, originalPath: string, queryParams: QueryParams): Results {\n  let handlers = state.handlers;\n  let regex: RegExp = state.regex();\n  if (!regex || !handlers) throw new Error(\"state not initialized\");\n  let captures: RegExpMatchArray | null = originalPath.match(regex);\n  let currentCapture = 1;\n  let result = new RecognizeResults(queryParams);\n\n  result.length = handlers.length;\n\n  for (let i = 0; i < handlers.length; i++) {\n    let handler = handlers[i];\n    let names = handler.names;\n    let shouldDecodes = handler.shouldDecodes;\n    let params: EmptyObject | Params = EmptyObject;\n\n    let isDynamic = false;\n\n    if (names !== EmptyArray && shouldDecodes !== EmptyArray) {\n      for (let j = 0; j < names.length; j++) {\n        isDynamic = true;\n        let name = names[j];\n        let capture = captures && captures[currentCapture++];\n\n        if (params === EmptyObject) {\n          params = {};\n        }\n\n        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {\n          (<Params>params)[name] = capture && decodeURIComponent(capture);\n        } else {\n          (<Params>params)[name] = capture;\n        }\n      }\n    }\n\n    result[i] = {\n      handler: handler.handler,\n      params,\n      isDynamic\n    };\n  }\n\n  return result;\n}\n\nfunction decodeQueryParamPart(part: string): string {\n  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n  part = part.replace(/\\+/gm, \"%20\");\n  let result;\n  try {\n    result = decodeURIComponent(part);\n  } catch (error) {result = \"\"; }\n  return result;\n}\n\ninterface NamedRoute {\n  segments: Segment[];\n  handlers: Handler[];\n}\n\nclass RouteRecognizer {\n  private states: State[];\n  private rootState: State;\n  private names: {\n    [name: string]: NamedRoute | undefined;\n  } = createMap<NamedRoute>();\n  map: (context: MatchCallback, addCallback?: (router: this, routes: Route[]) => void) => void;\n  delegate: Delegate | undefined;\n\n  constructor() {\n    let states: State[] = [];\n    let state = new State(states, 0, CHARS.ANY, true, false);\n    states[0] = state;\n    this.states = states;\n    this.rootState = state;\n  }\n\n  static VERSION = \"0.3.4\";\n  // Set to false to opt-out of encoding and decoding path segments.\n  // See https://github.com/tildeio/route-recognizer/pull/55\n  static ENCODE_AND_DECODE_PATH_SEGMENTS = true;\n  static Normalizer = {\n    normalizeSegment, normalizePath, encodePathSegment\n  };\n\n  add(routes: Route[], options?: { as: string }) {\n    let currentState = this.rootState;\n    let pattern = \"^\";\n    let types: [number, number, number] = [0, 0, 0];\n    let handlers: Handler[] = new Array(routes.length);\n    let allSegments: Segment[] = [];\n\n    let isEmpty = true;\n    let j = 0;\n    for (let i = 0; i < routes.length; i++) {\n      let route = routes[i];\n      let { names, shouldDecodes } = parse(allSegments, route.path, types);\n\n      // preserve j so it points to the start of newly added segments\n      for (; j < allSegments.length; j++) {\n        let segment = allSegments[j];\n\n        if (segment.type === SegmentType.Epsilon) { continue; }\n\n        isEmpty = false;\n\n        // Add a \"/\" for the new segment\n        currentState = currentState.put(CHARS.SLASH, false, false);\n        pattern += \"/\";\n\n        // Add a representation of the segment to the NFA and regex\n        currentState = eachChar[segment.type](segment, currentState);\n        pattern += regex[segment.type](segment);\n      }\n      handlers[i] = {\n        handler: route.handler,\n        names,\n        shouldDecodes\n      };\n    }\n\n    if (isEmpty) {\n        currentState = currentState.put(CHARS.SLASH, false, false);\n      pattern += \"/\";\n    }\n\n    currentState.handlers = handlers;\n    currentState.pattern = pattern + \"$\";\n    currentState.types = types;\n\n    let name: string | undefined;\n    if (typeof options === \"object\" && options !== null && options.as) {\n      name = options.as;\n    }\n\n    if (name) {\n      // if (this.names[name]) {\n      //   throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n      // }\n\n      this.names[name] = {\n        segments: allSegments,\n        handlers\n      };\n    }\n  }\n\n  handlersFor(name: string) {\n    let route = this.names[name];\n\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let result = new Array(route.handlers.length);\n\n    for (let i = 0; i < route.handlers.length; i++) {\n      let handler = route.handlers[i];\n      result[i] = handler;\n    }\n\n    return result;\n  }\n\n  hasRoute(name: string) {\n    return !!this.names[name];\n  }\n\n  generate(name: string, params?: Params | null) {\n    let route = this.names[name];\n    let output = \"\";\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let segments: Segment[] = route.segments;\n\n    for (let i = 0; i < segments.length; i++) {\n      let segment: Segment = segments[i];\n\n      if (segment.type === SegmentType.Epsilon) {\n        continue;\n      }\n\n      output += \"/\";\n      output += generate[segment.type](segment, params);\n    }\n\n    if (output.charAt(0) !== \"/\") { output = \"/\" + output; }\n\n    if (params && params.queryParams) {\n      output += this.generateQueryString(params.queryParams);\n    }\n\n    return output;\n  }\n\n  generateQueryString(params: QueryParams) {\n    let pairs: string[] = [];\n    let keys: string[] = Object.keys(params);\n    keys.sort();\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let value = params[key];\n      if (value == null) {\n        continue;\n      }\n      let pair = encodeURIComponent(key);\n      if (isArray(value)) {\n        for (let j = 0; j < value.length; j++) {\n          let arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n          pairs.push(arrayPair);\n        }\n      } else {\n        pair += \"=\" + encodeURIComponent(value);\n        pairs.push(pair);\n      }\n    }\n\n    if (pairs.length === 0) { return \"\"; }\n\n    return \"?\" + pairs.join(\"&\");\n  }\n\n  parseQueryString(queryString: string): QueryParams {\n    let pairs = queryString.split(\"&\");\n    let queryParams: QueryParams = {};\n    for (let i = 0; i < pairs.length; i++) {\n      let pair      = pairs[i].split(\"=\"),\n          key       = decodeQueryParamPart(pair[0]),\n          keyLength = key.length,\n          isArray = false,\n          value;\n      if (pair.length === 1) {\n        value = \"true\";\n      } else {\n        // Handle arrays\n        if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n          isArray = true;\n          key = key.slice(0, keyLength - 2);\n          if (!queryParams[key]) {\n            queryParams[key] = [];\n          }\n        }\n        value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n      }\n      if (isArray) {\n        (<string[]>queryParams[key]).push(value);\n      } else {\n        queryParams[key] = value;\n      }\n    }\n    return queryParams;\n  }\n\n  recognize(path: string): Results | undefined {\n    let results: Results | undefined;\n    let states: State[] = [ this.rootState ];\n    let queryParams = {};\n    let isSlashDropped = false;\n    let hashStart = path.indexOf(\"#\");\n    if (hashStart !== -1) {\n      path = path.substr(0, hashStart);\n    }\n\n    let queryStart = path.indexOf(\"?\");\n    if (queryStart !== -1) {\n      let queryString = path.substr(queryStart + 1, path.length);\n      path = path.substr(0, queryStart);\n      queryParams = this.parseQueryString(queryString);\n    }\n\n    if (path.charAt(0) !== \"/\") { path = \"/\" + path; }\n    let originalPath = path;\n\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n      path = normalizePath(path);\n    } else {\n      path = decodeURI(path);\n      originalPath = decodeURI(originalPath);\n    }\n\n    let pathLen = path.length;\n    if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n      path = path.substr(0, pathLen - 1);\n      originalPath = originalPath.substr(0, originalPath.length - 1);\n      isSlashDropped = true;\n    }\n\n    for (let i = 0; i < path.length; i++) {\n      states = recognizeChar(states, path.charCodeAt(i));\n      if (!states.length) { break; }\n    }\n\n    let solutions: State[] = [];\n    for (let i = 0; i < states.length; i++) {\n      if (states[i].handlers) { solutions.push(states[i]); }\n    }\n\n    states = sortSolutions(solutions);\n\n    let state = solutions[0];\n\n    if (state && state.handlers) {\n      // if a trailing slash was dropped and a star segment is the last segment\n      // specified, put the trailing slash back\n      if (isSlashDropped && state.pattern && state.pattern.slice(-5) === \"(.+)$\") {\n        originalPath = originalPath + \"/\";\n      }\n      results = findHandler(state, originalPath, queryParams);\n    }\n\n    return results;\n  }\n}\n\nRouteRecognizer.prototype.map = map;\n\nexport default RouteRecognizer;\n\ninterface CharSpec {\n  negate: boolean;\n  char: number;\n}\n"],"names":["const","let","this","child","i"],"mappings":"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"}